<?php

use \Phinx\Migration\AbstractMigration;
use \Phinx\Db\Adapter\MysqlAdapter;

class <%= migrationClass %> extends AbstractMigration
{
    public function up()
    {
        $<%= variableName %> = $this->table('<%= table %>', ['id' => false, 'primary_key' => [<% primaryKey.forEach((pk, i) => { %>'<%= pk %>' <% if (i !== primaryKey.length - 1){%>,<% } %><% }); %>]]);

        <% columns.forEach(c => { %>
        $<%= variableName %>->addColumn('<%= c.name %>', '<%= c.type.name %>'<% if (c.options || c.type.options) { %>, [
            <% for (option in c.options) { %>
            '<%= option %>' => <% if (typeof c.options[option] === 'string' && isNaN(c.options[option]) && !c.options[option].includes('::')) { %>'<%= c.options[option] %>'<% } else {%><%= c.options[option] %><% } %>,
            <% } %> <% for (option in c.type.options) { %>
            '<%= option %>' => <% if (typeof c.type.options[option] === 'string' && isNaN(c.type.options[option]) && !c.type.options[option].includes('::')) { %>'<%= c.type.options[option] %>'<% } else {%><%= c.type.options[option] %><% } %>,
            <% } %>
        ]<% } %>)<% let columnDependencies = dependencies.filter(d => d.sourceColumn === c.name); %>;
        <% }); %>

        <% indexes.forEach(index => {%>
        $<%= variableName %>->addIndex(['<%= index.Field %>']<% if (index.Key === 'UNI') {%>, ['unique' => true]<%}%>);
        <% }); %>

        $<%= variableName %>->save();

        <% if (content.length !== 0) { %>
        $rows = [
        <% content.forEach((item, index) => { %>
            [
            <% for (column in item) { %>
            '<%= column %>' => <% if (item[column]) { %>'<%- item[column] %>'<% } else if (column.includes('id')) { %>NULL<% } else { %>''<% } %>,
            <% } %>
            ]<% if (index !== content.length - 1){%>,<% } %>
        <% }); %>            
        ];

        $this->insert('<%= table %>', $rows);<% } %>
    }

    public function down()
    {
        $this->dropTable('<%= table %>');
    }
}